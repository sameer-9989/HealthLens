// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview A symptom checker AI agent.
 *
 * - symptomChecker - A function that handles the symptom checking process.
 * - SymptomCheckerInput - The input type for the symptomChecker function.
 * - SymptomCheckerOutput - The return type for the symptomChecker function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SymptomCheckerInputSchema = z.object({
  symptoms: z.string().describe('The symptoms that the user is experiencing.'),
  language: z.string().optional().describe("Target language for the response, e.g., 'es', 'fr'. Default is English."),
  culture: z.string().optional().describe("Cultural context for tailoring explanations, e.g., 'Hispanic', 'South Asian'.")
});
export type SymptomCheckerInput = z.infer<typeof SymptomCheckerInputSchema>;

const MedicineSuggestionSchema = z.object({
  name: z.string().describe('Name of the medicine.'),
  purpose: z.string().describe('Purpose of the medicine (e.g., pain relief, fever reducer, allergy treatment).'),
  category: z.enum(['OTC', 'Prescription', 'NaturalRemedy', 'Unknown']).optional().describe('Category of the medicine (e.g., Over-the-Counter, Prescription, Natural Remedy, Unknown). Default to Unknown if not clear.'),
  imageUrlHint: z.string().max(30).describe('A 1-3 word hint for an image of the medicine (e.g., "white round pill", "blue syrup bottle", "green capsule", "herbal tea bag"). This will be used for data-ai-hint for a placeholder image.'),
  generalDosage: z.string().describe('General, non-personalized dosage guidance (e.g., "1-2 tablets every 4-6 hours as needed for adults"). MUST include a disclaimer that this is not personalized medical advice and to follow product labeling or doctor\'s instructions.'),
  disclaimer: z.string().describe('Specific crucial disclaimer for this medicine, emphasizing to consult a healthcare professional before use and that this is not a prescription.')
});
export type MedicineSuggestion = z.infer<typeof MedicineSuggestionSchema>;

const PossibleConditionSchema = z.object({
  conditionName: z.string().describe('The name of the possible condition.'),
  relatedDietSuggestions: z.string().describe('Dietary suggestions relevant to this condition.'),
  recommendedLifestyleChanges: z.string().describe('Lifestyle changes recommended for this condition.'),
  suggestedMedicines: z.array(MedicineSuggestionSchema).optional().describe('A list of 1-3 common, possible medicines relevant to this condition, each with detailed information. Only suggest medicines if generally appropriate and widely known for the possible condition.'),
});

const SymptomCheckerOutputSchema = z.object({
  possibleConditions: z.array(PossibleConditionSchema).describe('A list of possible diagnoses based on the symptoms, each with details.'),
  triageRecommendations: z.string().describe('General recommendations for seeking medical care based on the symptoms.'),
  overallDisclaimer: z.string().describe('A general disclaimer that this is not medical advice and a doctor should be consulted.')
});
export type SymptomCheckerOutput = z.infer<typeof SymptomCheckerOutputSchema>;

export async function symptomChecker(input: SymptomCheckerInput): Promise<SymptomCheckerOutput> {
  return symptomCheckerFlow(input);
}

const prompt = ai.definePrompt({
  name: 'symptomCheckerPrompt',
  input: {schema: SymptomCheckerInputSchema},
  output: {schema: SymptomCheckerOutputSchema},
  prompt: `You are an AI-powered symptom checker. Your goal is to provide informational suggestions based on user-reported symptoms.
  THIS IS NOT MEDICAL ADVICE. ALWAYS ADVISE THE USER TO CONSULT A HEALTHCARE PROFESSIONAL FOR DIAGNOSIS AND TREATMENT.

  User Symptoms: {{{symptoms}}}
  {{#if language}}Target Language: {{language}}{{/if}}
  {{#if culture}}Cultural Context: {{culture}}{{/if}}

  Instructions:
  1. Analyze the symptoms provided.
  2. Identify 2-3 possible (but not definitive) conditions that might align with these symptoms. Do not exceed 4 possible conditions.
  3. For each possible condition, provide:
     a. The Condition Name.
     b. Related Diet Suggestions (e.g., "For [Condition Name], consider incorporating more hydrating fluids and bland foods like bananas or rice if stomach upset is present.").
     c. Recommended Lifestyle Changes (e.g., "For [Condition Name], ensure adequate rest and avoid strenuous activities.").
     d. Suggested Medicines:
        *   Provide 1-2 (max 3) *common* medicine suggestions that are *generally associated* with providing relief for symptoms of the possible condition.
        *   For each medicine, specify:
            *   'name': The common name of the medicine (e.g., Ibuprofen, Acetaminophen, Loratadine).
            *   'purpose': Its primary purpose (e.g., "Pain relief and fever reduction", "Antihistamine for allergy relief").
            *   'category': Classify as 'OTC' (Over-the-Counter), 'Prescription' (if typically prescribed, but state it's a general example), 'NaturalRemedy', or 'Unknown'.
            *   'imageUrlHint': A very brief (1-3 words) description for a placeholder image (e.g., "white pills", "nasal spray", "herbal tea", "cough syrup bottle").
            *   'generalDosage': General, non-personalized dosage information (e.g., "For adults, 1-2 tablets every 4-6 hours. Do not exceed X tablets in 24 hours. Always follow product label or doctor's advice."). Stress this is general.
            *   'disclaimer': A strong disclaimer like "This is general information, not a prescription. Consult your doctor or pharmacist before taking any medication to ensure it's safe and appropriate for you, especially if you have other health conditions or take other medicines."
        *   Only suggest medicines if it's common knowledge for the condition and appropriate for a general AI assistant to mention. Avoid highly specialized or controversial treatments.
  4. Provide general Triage Recommendations (e.g., "If symptoms worsen, or if you experience [severe symptom], seek medical attention immediately. For mild symptoms, monitor and consult a doctor if they persist.").
  5. Conclude with an 'overallDisclaimer' that this tool does not provide medical advice and a healthcare professional must be consulted for any health concerns.
  {{#if language}}
  6. IMPORTANT: Provide the ENTIRE response (all fields in the output schema) in the specified '{{language}}'.
  {{/if}}
  {{#if culture}}
  7. IMPORTANT: If a '{{culture}}' context is provided, try to make explanations and examples culturally relevant and sensitive if appropriate and possible for general conditions, without making harmful stereotypes. For example, food suggestions might generally align with common dietary patterns if known, or explanations might use analogies that are broadly understandable. This is a secondary consideration to accurate health information.
  {{/if}}

  Strictly follow the output JSON schema.
  Ensure all disclaimers are prominent and clear.
  Prioritize safety and responsible information sharing.
  `,
});

const symptomCheckerFlow = ai.defineFlow(
  {
    name: 'symptomCheckerFlow',
    inputSchema: SymptomCheckerInputSchema,
    outputSchema: SymptomCheckerOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    if (!output) {
      throw new Error("Symptom checker failed to produce an output.");
    }
     // Ensure overall disclaimer is always present
    if (!output.overallDisclaimer || output.overallDisclaimer.trim() === "") {
      output.overallDisclaimer = "This information is not medical advice. Always consult with a qualified healthcare professional for any health concerns or before making any decisions related to your health or treatment.";
      if (input.language === "es") { // Basic example for Spanish
        output.overallDisclaimer = "Esta información no es un consejo médico. Consulte siempre con un profesional de la salud calificado para cualquier preocupación de salud o antes de tomar cualquier decisión relacionada con su salud o tratamiento.";
      }
    }
    // Ensure individual medicine disclaimers are present
    output.possibleConditions.forEach(condition => {
      condition.suggestedMedicines?.forEach(med => {
        if (!med.disclaimer || med.disclaimer.trim() === "") {
          med.disclaimer = "Consult your doctor or pharmacist before taking any medication. This is not a prescription.";
        }
        if (med.generalDosage && !med.generalDosage.toLowerCase().includes("consult") && !med.generalDosage.toLowerCase().includes("doctor") && !med.generalDosage.toLowerCase().includes("pharmacist") && !med.generalDosage.toLowerCase().includes("label")) {
            med.generalDosage += " Always follow product labeling or a doctor's advice for dosage.";
        }
      });
    });
    return output;
  }
);

